model User {
  id             String           @id @default(uuid())
  name           String?
  email          String           @unique
  password       String
  roleAssignments RoleAssignment[] @relation("UserToRoleAssignment")
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
}

model Role {
  id                String            @id @default(uuid())
  name              String            @unique
  description       String?
  permissions       Permission[]      @relation("RoleToPermission")
  roleAssignments   RoleAssignment[]  @relation("RoleToAssignment")
  staffInvitations  StaffInvitation[]
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
}

model Permission {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?
  roles       Role[]   @relation("RoleToPermission")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model RoleAssignment {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation("UserToRoleAssignment", fields: [userId], references: [id])
  roleId    String
  storeId   String
  store     Store    @relation("StoreToRoleAssignment", fields: [storeId], references: [id])
  role      Role     @relation("RoleToAssignment", fields: [roleId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, roleId, storeId])
  @@index([userId])
  @@index([roleId])
  @@index([storeId])
}

model StaffInvitation {
  id           String   @id @default(uuid())
  email        String
  storeId      String
  store        Store    @relation("StoreToStaffInvitation", fields: [storeId], references: [id])
  roleId       String
  role         Role     @relation(fields: [roleId], references: [id])
  token        String   @unique
  status       String   @default("pending") // pending, accepted, expired
  expiresAt    DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@unique([email, storeId])
  @@index([storeId])
  @@index([roleId])
}

model Customer {
  id        String          @id @default(uuid())
  storeId   String
  store     Store           @relation("StoreToCustomer", fields: [storeId], references: [id])
  orders    Order[]         @relation("CustomerToOrder")
  name      String
  email     String
  password  String
  phone     String?
  addresses Address[]
  reviews   ProductReview[]
  createdAt DateTime        @default(now())
  updatedAt DateTime        @default(now())

  @@unique([email, storeId])
  @@index([storeId])
}

model Address {
  id         String   @id @default(uuid())
  customerId String
  customer   Customer @relation(fields: [customerId], references: [id])
  type       String
  street     String
  city       String
  state      String
  postalCode String
  country    String
  isDefault  Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now())

  @@index([customerId])
}
